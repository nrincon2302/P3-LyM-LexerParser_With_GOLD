using gold.**

toSet(C) :=  {x|  x in C}

/**PARSER DEFINITION (PUSHDOWN AUTOMATON)**/

function createParser(A):IPushdownAutomaton begin
	
	/**STATES DEFINITION**/
	
	Q:= (0‥54)∪(98‥100)
	
	/**INPUT ALPHABET DEFINITION**/
	
	Σ:= toSet(A) ∪ {' ', '\n'} 
	
	/**STACK ALPHABET**/
	Γ:={'$','D','C', 'O', 'I', 'A', 'B', 'V', 'L', 'R', 'E'}
	
	/**INITIAL STATE**/
	
	q₀:= 0
	
	/**SET OF FINALS STATES**/
	
	F:= {100}
	
	M:=GPushdownAutomaton(Q,Σ,Γ,q₀,F)
	
	SkipChars := {' ', '\n'}   // this will only  be used when testing only the parser as the lexer removes  SkipChars
	
	/**TRANSITIONS FOR VERIFY ROBOT_R KEYWORD (MANDATORY)**/
	
	M.delta(0,1,λ).push("$")
	M.delta(1,23,'(').push("V")

	/**DEFVAR**/
	M.delta(2,3,'d').push("D")
	M.delta(3,4,'v').ignore()
	M.delta(4,5,'#').ignore()
	M.delta(5,6,')').pop("D")
	M.delta(6,100,λ).pop("$")
	
	/**CONDITIONS**/
	M.delta(8,9,'(').ignore()		
	M.delta(12,13,')').pop("C")
	M.delta(13,100,λ).pop("$VI")

	/**se trata de una condicion dentro de un if**/
	M.delta(13,23,'(').ignore()
	M.delta(12,13,'D').pop("C")

	/**1. facing**/
	M.delta(9,10,'F').push("C")
	M.delta(10,11,'?').ignore()
	M.delta(11,12,'d').ignore()
	
	
	/**2. blocked?**/
	M.delta(9,13,'O').push("C")
	M.delta(13,12,'?').ignore()
	
	
	/**3. can-put?**/
	M.delta(9,14,'P').push("C")
	M.delta(14,15,'?').ignore()
	M.delta(15,16,'o').ignore()
	M.delta(16,12,'#').ignore()

	/**4. can-move**/
	M.delta(9,17,'W').push("C")
	M.delta(17,18,'?').ignore()
	M.delta(18,19,':').ignore()
	M.delta(19,12,'d').ignore()
	
	/**5.isZero**/
	M.delta(9,20,'Z').push("C")
	M.delta(20,21,'?').ignore()
	M.delta(21,12,'#').ignore()
	
	/**6. not cond**/
	M.delta(9,8,'n').ignore()
	M.delta(8,9,'(').ignore()
	

	/**COMMANDOS**/	
	/**comnado dentro de un if**/
	M.delta(26,47,')').pop("AO")
	M.delta(47,47,')').pop("A")
	M.delta(47,23,'(').push("A")
	M.delta(26,47,'D').changeTop("IO", "L")
	M.delta(26,47,'T').pop("LO")
	M.delta(23,23,'(').push("A")
	M.delta(47,23,'(').ignore()
	M.delta(46,100,λ).pop("$V")
	M.delta(47,100,λ).pop("$V")
	
	M.delta(47,100,λ).pop("$V")
	M.delta(47,100,λ).pop("$V")
	
	/**2. = name n**/
	M.delta(23,24,'=').push("O")
	M.delta(24,25,'v').ignore()
	M.delta(25,26,'#').ignore()
	M.delta(25,26,'v').ignore()
	
	/**3. = move n, skip n**/
	M.delta(23,28,'m').push("O")
	M.delta(28,26,'#').ignore()
	M.delta(28,26,'v').ignore()

	/**4. = turn D**/
	M.delta(23,29,'t').push("O")
	M.delta(29,30,':').ignore()
	M.delta(30,26,'C').ignore()
	M.delta(30,26,'A').ignore()
	
	/**5. = face O**/
	M.delta(23,31,'f').push("O")
	M.delta(31,32,':').ignore()
	M.delta(32,26,'d').ignore()
	
	/**6. = put/pick X n**/
	M.delta(23,33,'p').push("O")
	M.delta(33,34,':').ignore()
	M.delta(34,35,'o').ignore()
	M.delta(35,26,'#').ignore()
	M.delta(35,26,'v').ignore()
		
	/**7. (move-dir n D)**/
	M.delta(23,36,'h').push("O")
	M.delta(36,37,'#').ignore()
	M.delta(37,38,':').ignore()
	M.delta(38,26,'z').ignore()
	M.delta(38,26,'C').ignore()
	
	/**8. = (run-dirs Ds)**/
	M.delta(23,40,'u').push("O")
	M.delta(40,41,':').ignore()
	M.delta(41,42,'z').ignore()
	M.delta(41,42,'C').ignore()
	M.delta(42,27,')').pop("O")
	M.delta(42,41,':').ignore()
	
	/**9. = (move-face n O)**/
	M.delta(23,43,'a').push("O")
	M.delta(43,44,'#').ignore()
	M.delta(43,44,'v').ignore()
	M.delta(44,45,':').ignore()
	M.delta(45,26,'d').ignore()
	
	/**10. = (null)**/
	M.delta(23,26,'l').push("O")
	
	/**CONDITIONAL**/
	M.delta(23,8,'I').push("I")
	
	/**REPEAT**/
	M.delta(23,8,'L').push("L")

	/**REPEAT TIMES**/
	M.delta(23,48,'R').push("L")
	M.delta(48,49,'#').ignore()
	M.delta(48,49,'v').ignore()
	M.delta(49,23,'(').ignore()
	
	/**DEFUN**/
	M.delta(23,50,'e').push("E")
	M.delta(50,51,'v').ignore()
	M.delta(51,52,'(').ignore()
	M.delta(52,53,'v').ignore()
	M.delta(53,53,'v').ignore()
	M.delta(53,54,')').ignore()
	M.delta(52,54,')').ignore()
	
return M
end