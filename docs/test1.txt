((move one)
(turn :around)
(face :north)
((run-dirs :front :right)
(defvar one 1)
(defvar two 2)
(move-face one :west))
(=two 3))

(if (not (blocked?))
(face :south)
(((move 5)(turn :around))
(run-dirs :front :back :right))
)

(if (blocked?)
((move 3)(skip 2))
((move 2)(skip 1))
)

(defvar rotate 3)

(if (can-move? :north) (move-dir 1 :front) (null))

(
( if (not (blocked?) ) (move 1) (null) )
( turn :left )
)

( defvar one 1)

( defun foo ( c p )
(put :chips c )
(put :balloons p )
( move rotate ) )

( foo 1 3)

( defun goend ()
( if (not (blocked?) )
(( move one )
( goend ) )

( null ) ) )

( defun fill ()
( repeat Spaces ( if (not ( isZero? myChips ) ) (put :chips 1) ( null )
) )
)

( defun pickAllB ()
(pick :balloons balloonsHere )
)

( run-dirs :left :front :left :back :right )