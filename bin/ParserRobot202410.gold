using gold.**

toSet(C) :=  {x|  x in C}

/**PARSER DEFINITION (PUSHDOWN AUTOMATON)**/

function createParser(A):IPushdownAutomaton begin
	
	/**STATES DEFINITION**/
	
	Q:= (0‥100)
	
	/**INPUT ALPHABET DEFINITION**/
	
	Σ:= toSet(A) ∪ {' ', '\n'} 
	
	/**STACK ALPHABET**/
	Γ:={'$','P','D','C','E','I','L','R','A','N','1','2'}
	
	/**INITIAL STATE**/
	
	q₀:= 0
	
	/**SET OF FINALS STATES**/
	
	F:= {100}
	
	M:=GPushdownAutomaton(Q,Σ,Γ,q₀,F)
	
	SkipChars := {' ', '\n'}   // this will only  be used when testing only the parser as the lexer removes  SkipChars
	
	/**TRANSITIONS FOR VERIFY ROBOT_R KEYWORD (MANDATORY)**/
	
	M.delta(0,1,λ).push("$")
	M.delta(1,2,'(').push("P")
	M.delta(2,2,'(').push("P")
	
	/**DEFVAR**/
	M.delta(2,3,'d').push("D")
	M.delta(3,4,'v').ignore()
	M.delta(4,5,'#').ignore()
	M.delta(4,5,':').ignore()
	M.delta(5,5,'d').ignore()
	M.delta(5,5,'C').ignore()
	M.delta(5,5,'A').ignore()
	M.delta(5,5,'z').ignore()
	M.delta(5,5,'o').ignore()
	M.delta(5,99,')').pop("PD")
	
	/**COMANDOS**/
	/**1. = name n**/
	M.delta(2,6,'=').push("C")
	M.delta(6,7,'v').ignore()
	M.delta(7,7,':').ignore()
	M.delta(7,98,'d').ignore()
	M.delta(7,98,'C').ignore()
	M.delta(7,98,'A').ignore()
	M.delta(7,98,'z').ignore()
	M.delta(7,98,'o').ignore()
	M.delta(7,98,'#').ignore()
	M.delta(7,98,'v').ignore()
	
	/**2. = move n, skip n**/
	M.delta(2,8,'m').push("C")
	M.delta(8,98,'#').ignore()
	M.delta(8,98,'v').ignore()
	
	/**3. = turn D**/
	M.delta(2,9,'t').push("C")
	M.delta(9,10,':').ignore()
	M.delta(10,98,'C').ignore()
	M.delta(10,98,'A').ignore()
	M.delta(9,98,'v').ignore() //Una variable no tiene los : adelante
	
	/**4. = face O**/
	M.delta(2,11,'f').push("C")
	M.delta(11,12,':').ignore()
	M.delta(12,98,'d').ignore()
	M.delta(11,98,'v').ignore()
	
	/**5. = put/pick X n**/
	M.delta(2,13,'p').push("C")
	M.delta(13,15,'v').ignore()
	M.delta(13,14,':').ignore()
	M.delta(14,15,'o').ignore()
	M.delta(15,98,'#').ignore()
	M.delta(15,98,'v').ignore()
		
	/**6. (move-dir n D)**/
	M.delta(2,16,'h').push("C")
	M.delta(16,17,'#').ignore()
	M.delta(16,17,'v').ignore()
	M.delta(17,18,':').ignore()
	M.delta(18,98,'z').ignore()
	M.delta(18,98,'C').ignore()
	M.delta(17,98,'v').ignore()
	
	/**7. = (run-dirs Ds)**/
	M.delta(2,19,'u').push("C")
	M.delta(19,20,':').ignore()
	M.delta(20,21,'z').ignore()
	M.delta(20,21,'C').ignore()
	M.delta(19,21,'v').ignore()
	M.delta(21,99,')').pop("PC") // Caso especial: Acaba el comando
	M.delta(19,99,')').pop("PC") // Caso especial: Acaba el comando
	M.delta(21,20,':').ignore()
	M.delta(21,19,'v').ignore()
	
	/**8. = (move-face n O)**/
	M.delta(2,22,'a').push("C")
	M.delta(22,23,'#').ignore()
	M.delta(22,23,'v').ignore()
	M.delta(23,24,':').ignore()
	M.delta(24,98,'d').ignore()
	M.delta(23,98,'v').ignore()
	
	/**9. = (null)**/
	M.delta(2,98,'l').push("C")
	
	/**DEFUN**/
	M.delta(2,25,'e').push("E")
	M.delta(25,26,'v').ignore()
	M.delta(26,27,'(').push("P")
	M.delta(27,28,'v').$skip("P")
	M.delta(28,28,'v').$skip("P")
	M.delta(27,2,')').pop("P") // Función sin argumentos
	M.delta(28,2,')').pop("P") // Lo mando a que haga la operación de bloques
	
	/**CONDITIONAL**/
	M.delta(2,29,'I').push("I")
	M.delta(29,30,'(').push("P")
	M.delta(31,2,')').changeTop("PA","1") // Lo mando a que haga la operación de bloque1
	M.delta(31,33,')').changeTop("NPA","N")
	
	/**CONDITIONS**/
	// Usados hasta ahora en la pila PDCE$IL
	/**1. facing? O**/
	M.delta(30,40,'F').push("A")
	M.delta(40,41,'?').ignore()
	M.delta(41,31,'d').ignore()
	
	/**2. blocked?**/
	M.delta(30,42,'O').push("A")
	M.delta(42,31,'?').ignore()
	
	/**3. can-put/pick? X n**/
	M.delta(30,43,'P').push("A")
	M.delta(43,44,'?').ignore()
	M.delta(44,45,'o').ignore()
	M.delta(45,31,'#').ignore()

	/**4. can-move? D**/
	M.delta(30,46,'W').push("A")
	M.delta(46,47,'?').ignore()
	M.delta(47,48,':').ignore()
	M.delta(48,31,'d').ignore()
	
	/**5. isZero? V**/
	M.delta(30,49,'Z').push("A")
	M.delta(49,50,'?').ignore()
	M.delta(50,31,'#').ignore()
	
	/**6. not cond**/
	M.delta(30,32,'n').push("N")
	M.delta(32,30,'(').push("P")
	M.delta(33,2,')').changeTop("PN","1")
	
	
	/**FINALIZACIONES**/
	/* Finalización de una función */
	M.delta(99,97,')').pop("PE")
	M.delta(99,97,"))").pop("PEP")
	M.delta(99,2,")(").$skip("P")
	M.delta(97,100,λ).pop("$")
	M.delta(97,2,'(').push("P") //Si algo continúa después de acabar un fragmento lógico
	
	/* Finalización dentro de un condicional */
	M.delta(98,96,')').changeTop("PI1PC","PI2")
	M.delta(99,96,')').changeTop("PI1P","PI2")
	M.delta(96,2,'(').push("P")
	M.delta(98,95,')').changeTop("PI2PC","PI")
	M.delta(99,95,')').changeTop("PI2P","PI")
	M.delta(98,95,")(").push("AAAAA")
	M.delta(99,95,")(").push("AAAAA")
	M.delta(95,94,')').pop("PI")
	M.delta(94,100,λ).pop("$")
	M.delta(94,2,'(').push("P") // Si algo continúa después de acabar un condicional
	
	/** Finalización de un comando o bloque**/
	M.delta(98,99,')').pop("PC")
	M.delta(99,99,')').changeTop("PP","P")
	M.delta(99,100,')').pop("$P")
	M.delta(99,100,λ).pop("$")
	M.delta(99,2,'(').push("P")
	M.delta(100,2,'(').push("P")
	
	
	
	
	
return M
end